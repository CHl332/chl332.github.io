<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis</title>
      <link href="/2022/10/09/redis/"/>
      <url>/2022/10/09/redis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Redis常用配置</p><img src="/2022/10/09/redis/mywechat.jpg" class="" title="myWechat"><p>daemonize no</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">配置 redis server 是否以守护进程的方式启动。</span><br><span class="line">no：不以守护进程启动。</span><br><span class="line">yes：以守护进程启动。</span><br></pre></td></tr></table></figure><p>pidfile “&#x2F;var&#x2F;run&#x2F;redis&#x2F;redis-server.pid”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当 Redis 以守护进程方式启动时，会在该文件里面写入 redis 的进程 id。</span><br></pre></td></tr></table></figure><p>port 6379</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置 redis server 启动的端口，默认为 6379。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tcp-backlog 511</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TCP 监听的最大容纳数量。</span><br><span class="line">在高并发的环境下，需要把这个值调高以避免客户端连接缓慢的问题。</span><br><span class="line">如果该值大于 Linux 内核的值，则 Linux 内核会把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值， 此时要同时修改这两个值才能生效。</span><br></pre></td></tr></table></figure><span id="more"></span><p>bind 192.168.98.70</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，Redis 会监听所有 IP 的客户端连接。 如果只想让它在一个网络接口上监听，那你就绑定一个 IP 或者多个 IP。</span><br></pre></td></tr></table></figure><p>unixsocket &#x2F;var&#x2F;run&#x2F;redis&#x2F;redis.sock</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定 unix socket 的路径。</span><br></pre></td></tr></table></figure><p>unixsocketperm 700</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定 unix socket 文件的权限。</span><br></pre></td></tr></table></figure><p>timeout 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指定一个再client链接空闲多少秒之后关闭连接，0就是不关闭</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tcp-keepalive 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCP 心跳包。 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。</span><br></pre></td></tr></table></figure><p>loglevel   notice</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义日志级别。</span><br></pre></td></tr></table></figure><p>logfile “&#x2F;var&#x2F;log&#x2F;redis&#x2F;redis-server.log”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义日志文件的位置。</span><br></pre></td></tr></table></figure><p>syslog-enabled  no</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是否将志记录到系统日志，no：不记录， yes：记录。</span><br></pre></td></tr></table></figure><p>syslog-ident redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置系统日志的 identity，即系统日志的唯一标志。</span><br></pre></td></tr></table></figure><p>syslog-facility local0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。</span><br></pre></td></tr></table></figure><p>databases 16</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置数据库的数目。</span><br><span class="line">默认数据库是 DB 0，你可以在每个连接上使用 select dbid 命令选择一个不同的数据库， 但是 dbid 必须是一个介于 0 到 databasees - 1 之间的值。</span><br></pre></td></tr></table></figure><p>save 900 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据给定的时间间隔和写入次数将数据保存到磁盘。</span><br><span class="line">900 秒内如果至少有 1 个 key 的值变化，则保存。</span><br></pre></td></tr></table></figure><p>save 300 10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">300 秒内如果至少有 10 个 key 的值变化，则保存。</span><br></pre></td></tr></table></figure><p>save 60 10000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">60 秒内如果至少有 10000 个 key 的值变化，则保存</span><br></pre></td></tr></table></figure><p>save “”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你可以注释掉所有的 save 行来停用保存功能。 也可以直接一个空字符串来实现停用。</span><br></pre></td></tr></table></figure><p>stop-writes-on-bgsave-error  yes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，如果 Redis 最后一次的后台保存失败，Redis 将停止接受写操作， 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，否则就会没人注意到灾难的发生。</span><br><span class="line">如果后台保存进程重新启动工作了，Redis 也将自动的允许写操作。</span><br><span class="line">然而你要是安装了靠谱的监控，你可能不希望 Redis 这样做，那你就改成 no 好了。</span><br></pre></td></tr></table></figure><p>rdbcompression yes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串。默认都设为 yes 。</span><br><span class="line">如果你希望保存子进程节省点 cpu ，你就设置它为 no ， 不过这个数据集可能就会比较大。</span><br></pre></td></tr></table></figure><p>rdbchecksum yes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是否校验 rdb 文件。</span><br></pre></td></tr></table></figure><p>dbfilename dump.rdb</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置 dump 的文件位置。</span><br></pre></td></tr></table></figure><p>dir .&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">工作目录。上面的 dbfilename 只指定了文件名，但是它会写入到这个目录下。</span><br><span class="line">这个配置项一定是个目录，而不能是文件名。</span><br></pre></td></tr></table></figure><iframe src="https://www.bilibili.com/video/BV1Rv41177Af/?spm_id_from=333.337.search-card.all.click&vd_source=2378b389723ac544be3e9753772cd992&t=0.1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"  height="580" quality="high" > </iframe>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
